# -*- coding: utf-8 -*-
"""Copy of testing_data2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oR262foJNN4Jr8FMHFgxflhnELiLYiR_
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#Used to plot data in csv
def plot_points(X,y):
  plt.scatter(X[np.argwhere(y==0).flatten(),0], X[np.argwhere(y==0).flatten(),1],s = 50, color = 'blue', edgecolor = 'k')
  plt.scatter(X[np.argwhere(y==1).flatten(),0], X[np.argwhere(y==1).flatten(),1],s = 50, color = 'red', edgecolor = 'k')

  plt.xlim(-2.05,2.05)
  plt.ylim(-2.05,2.05)
  plt.grid(False)
  plt.tick_params(
      axis='x',
      which='both',
      bottom=False,
      top=False)
  plt.show()

#Used to plot the resulting model
def plot_model(X, y, clf):
    plt.scatter(X[np.argwhere(y==0).flatten(),0],X[np.argwhere(y==0).flatten(),1],s = 50, color = 'blue', edgecolor = 'k')
    plt.scatter(X[np.argwhere(y==1).flatten(),0],X[np.argwhere(y==1).flatten(),1],s = 50, color = 'red', edgecolor = 'k')

    plt.xlim(-2.05,2.05)
    plt.ylim(-2.05,2.05)
    plt.grid(False)
    plt.tick_params(
        axis='x',
        which=False,
        bottom=False,
        top=False)

    r = np.linspace(-2.1,2.1,300)
    s,t = np.meshgrid(r,r)
    s = np.reshape(s,(np.size(s),1))
    t = np.reshape(t,(np.size(t),1))
    h = np.concatenate((s,t),1)

    z = clf.predict(h)

    s = s.reshape((np.size(r),np.size(r)))
    t = t.reshape((np.size(r),np.size(r)))
    z = z.reshape((np.size(r),np.size(r)))

    plt.contourf(s,t,z,colors = ['blue','red'],alpha = 0.2,levels = range(-1,2))
    if len(np.unique(z)) > 1:
        plt.contour(s,t,z,colors = 'k', linewidths = 2)
    plt.show()

df = pd.read_csv("2_class_data.csv")

# Os dados s√£o salvos em um data frame
df[:5]

plt.scatter(df['x1'], df['x2'])

from mlxtend.plotting import category_scatter
fig = category_scatter(x='x1', y='x2', label_col='y', 
                       data=df, legend_loc='upper left')

# Getting the first two columns of a data frame
df[:5][['x1','x2']]

X = np.array(df[['x1','x2']])
y = np.array(df['y'])

plot_points(X,y)

X[:3]

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC

# Logistic Regression Classifier
classifier = LogisticRegression()
classifier.fit(X,y)
plot_model(X,y,classifier)

# Decision Tree Classifier
classifier = DecisionTreeClassifier()
classifier.fit(X,y)
plot_model(X,y,classifier)

# Support Vector Machine Classifier
classifier = SVC()
classifier.fit(X,y)
plot_model(X,y,classifier)

# using neural network
from sklearn.neural_network import MLPClassifier
classifier = MLPClassifier()
classifier.fit(X,y)
plot_model(X,y,classifier)

